---

- name: "Create dir redis"
  become: yes
  file:
    path: "{{ webinstance.path }}{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default( webinstance.process_user, true ) }}"
    group: "{{ item.group | default( webinstance.process_group, true ) }}"
    setype: "{{ item.setype | default( '_default' ) }}"
    mode: "u=rwx,g=rx,o=rx"
#  when: webinstance.enable_redis|default(False)
  loop:
    - { path: "/log/redis", setype: "redis_var_run_t" }
    - { path: "/redis",     setype: "redis_var_run_t" }

- name: Create redis-conf
  become: yes
  template:
    src: redis.conf.j2
    dest: /etc/redis-{{ webinstance.fullname }}.conf
    owner: "{{ webinstance.process_user }}"
    group: root
    mode: 0640
  register: redis_conf

- name: Create redis service
  become: yes
  template:
    src: redis.service.j2
    dest: /usr/lib/systemd/system/redis-{{ webinstance.fullname }}.service
    owner: root
    group: root
    mode: 0640
  register: redis_service

- name: Enable service redis, and not touch the state
  become: yes
  service:
    name: "redis-{{ webinstance.fullname }}"
    enabled: yes

- name: Restart service redis
  become: yes
  service:
    name: "redis-{{ webinstance.fullname }}"
    state: restarted
  when: redis_conf.changed or redis_service.changed

#Fixa SElinux fÃ¶r redis-socket:
#https://crosscompute.com/n/iEXrc3ZVlkGgMycIvL3Ry0nOf0sXiEud/-/tutorials/create-an-selinux-policy-for-your-web-service
#https://relativkreativ.at/articles/how-to-compile-a-selinux-policy-package