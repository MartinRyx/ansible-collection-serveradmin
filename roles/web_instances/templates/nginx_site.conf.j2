#
# Managed by Ansible!
#
# 
{% set https = webinstance.enable_https %}
{% set path = webinstance.path %}
{% set domains = domaininstance.domains %}
{%- if domains[1] is defined or https -%}
# Med https: Alla http-adresser vidarebefodras
# Utan https: Icke primära adresser vidarebefodras
server {
  server_name{{ '         ' }}
{%- for url in domains -%}
{%- if not loop.first or https -%}
{{ " " }}{{ url }}
{%- endif -%}
{%- endfor -%}
;

  listen              80;

  {% if https %}
  location '/.well-known/acme-challenge' {
    default_type "text/plain";
    alias        {{ path }}/letsencrypt/challenges;
    try_files $uri =404;
  }
  {% endif %}

  location / {
    return 302 http{%- if https -%}s{%- endif -%}://{{ domains[0] }}$request_uri;
  }
}
{% endif %}
{% if domains[1] is defined and https %}

# Icke primära adresser med https vidarebefodras
server {
  server_name{{ '         ' }}
{%- for url in domains -%}
{%- if not loop.first -%}
{{ " " }}{{ url }}
{%- endif -%}
{%- endfor -%}
;

  listen              443 ssl http2;

  #ssl on; #ssl is defined in listen
  ssl_certificate     /etc/nginx/ssl/chained-{{ domaininstance.fullname }}.pem;
  ssl_certificate_key /etc/nginx/ssl/domain-{{ domaininstance.fullname }}.key;

  location / {
    return 302 https://{{ domains[0] }}$request_uri;
  }
}
{% endif %}

# Enbart primäradressen (med https om aktiverat):
server {
  server_name     {{ domains[0] }};

{% if https %}
  listen              443 ssl http2;

  #ssl on; #ssl is defined in listen
  ssl_certificate     /etc/nginx/ssl/chained-{{ domaininstance.fullname }}.pem;
  ssl_certificate_key /etc/nginx/ssl/domain-{{ domaininstance.fullname }}.key;
{% else %}
  listen              80;
{% endif %}

{% for name, value in webinstance.fastcgi_params.domain_instance.items() %}
  set ${{ name }} '{{ domaininstance[value] | default('') }}';
{% endfor %}

{% if webinstance.nginx_includes.domain_instance is defined %}
{%   set output = {'text': webinstance.nginx_includes.domain_instance } %}
{%   for key in webinstance.nginx_includes.domain_instance | regex_findall('<<([^>]*)>>') %}
{{-    output.__setitem__('text', output.text | regex_replace('<<'+key+'>>', domaininstance[key] | default('') )) -}}
{%   endfor %}
{{-  output.text -}}
{% endif %}


  include web_instances.d/{{ webinstance.fullname }}.include;
}
