#! /bin/bash
{% set hostname = item.0 %}
{% set script_output_dir = backup_info.backup_script_output_dir ~  hostname %}
{% set script_working_dir = backup_info.backup_script_working_dir ~ hostname %}
# Generated by Ansible
#
# Source: http://www.mad-hacking.net/documentation/linux/reliability/backup/using-rsnapshot-remote.xml
# Source: http://troy.jdmz.net/rsync/#validate-rsync
LOG_ERROR="$(echo ~)/validate-backup-cmd-error_{{ hostname }}.log"
LOG_ACCESS="$(echo ~)/validate-backup-cmd-access_{{ hostname }}.log"

#$SSH_ORIGINAL_COMMAND

echo "$(date "+[%F %T]") $SSH_ORIGINAL_COMMAND" >> "$LOG_ACCESS"

case "$SSH_ORIGINAL_COMMAND" in
*\&*|*\|*|*\;*|*\>*|*\<*|*\!*)
echo "Rejected"
echo "$(date "+[%F %T]") Rejected level 1: $SSH_ORIGINAL_COMMAND" >> "$LOG_ERROR"
exit 1
;;

# Backup:
rsync\ --server\ --sender*)
{# sudo $SSH_ORIGINAL_COMMAND #}
{# $SSH_ORIGINAL_COMMAND #}
SSH_COMMAND="$SSH_ORIGINAL_COMMAND"
# https://stackoverflow.com/questions/13210880/replace-one-substring-for-another-string-in-shell-script
# Ta bort kommadnot rsync, så vi kan köra det med fler argument nedan.
SSH_COMMAND="${SSH_COMMAND/rsync /}"
# There must be a starting / in rsnapshot conf, so remove the first from __backuproot__-replacement:
BACKUP_ROOT="{{ script_output_dir[1:] }}"
# Ersätt med backuprooten:
SSH_COMMAND="${SSH_COMMAND//__backuproot__/$BACKUP_ROOT}"
echo "Command to run: rsync --exclude '*__nobackup__*' --exclude '.ssh' $SSH_COMMAND" >> "$LOG_ACCESS"
# Vi gör det här istället för i variabler: http://mywiki.wooledge.org/BashFAQ/050
# Filer med __nobackup__ i sig ska aldrig gå att ta backup på.
rsync --exclude '*__nobackup__*' --exclude '.ssh' $SSH_COMMAND
;;


# Rapportering av lyckad backup:
success\ *)
# Split by ' ' to array
# https://stackoverflow.com/questions/918886/how-do-i-split-a-string-on-a-delimiter-in-bash#tab-top
SUCCESS=($SSH_ORIGINAL_COMMAND)
{% for backupinstance in backup_info.instances.values() | list %}
{%   for destinstance in backupinstance.dest_instances %}
{%     if hostname == destinstance.host %}
         if [ "${SUCCESS[1]}" = "{{ backupinstance.name }}" ] && [ "${SUCCESS[2]}" = "{{ hostname }}" ]; then
           txtfile="/opt/backup_source/success-{{ backupinstance.name }}-{{ hostname }}.txt"
           echo -n "${SUCCESS[@]:3}" > "$txtfile"
           chmod a+r "$txtfile"
           exit 0
         fi
{%     endif %}
{%   endfor %}
{% endfor %}
echo "Rejected success report"
echo "$(date "+[%F %T]") Rejected success report: $SSH_ORIGINAL_COMMAND" >> "$LOG_ERROR"
exit 1
;;

#Kör scriptet preparebackup.sh
preparebackup\ *)
PREPARE=($SSH_ORIGINAL_COMMAND)
{% for backupinstance in backup_info.instances.values() | list %}
{%   for destinstance in backupinstance.dest_instances %}
{%     if hostname == destinstance.host %}
         if [ "${PREPARE[1]}" = "{{ backupinstance.name }}" ] && [ "${PREPARE[2]}" = "{{ hostname }}" ]; then
           {{ backup_info.source_user.home }}/preparebackup_{{ hostname }}.sh "{{ backupinstance.name }}"
           exit 0
         fi
{%     endif %}
{%   endfor %}
{% endfor %}
echo "Rejected prepare backup"
echo "$(date "+[%F %T]") Rejected prepare backup: $SSH_ORIGINAL_COMMAND" >> "$LOG_ERROR"
exit 1
;;
{# TODO: Separera mellan olika backupdest-hosts #}
{% if backupscripts.stdout_lines is defined %}
{%   for instance in backupscripts.stdout_lines %}
{{     instance }})
{{     backup_info.source_user.home }}/scripts/{{ instance }}
;;
{%   endfor %}
{% endif %}

*)
echo "Rejected"
echo "$(date "+[%F %T]") Rejected no match: $SSH_ORIGINAL_COMMAND" >> "$LOG_ERROR"
exit 1
;;

esac
