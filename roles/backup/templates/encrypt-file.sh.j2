#!/bin/bash
{% set hostname = item.0 %}
{% set script_output_dir = backup_info.backup_script_output_dir ~  hostname %}
{% set script_working_dir = backup_info.backup_script_working_dir ~ hostname %}

# Exit on error:
set -e

SOURCE_FILE="$1" #/home/system/backup_source/__nobackup__/__nobackup__encryptme.gz"
#https://unix.stackexchange.com/questions/11376/what-does-double-dash-mean
#https://stackoverflow.com/questions/965053/extract-filename-and-extension-in-bash
SOURCE_FILE_FULLNAME="$(basename -- "$SOURCE_FILE")"
SOURCE_FILE_FULLNAME="${SOURCE_FILE_FULLNAME##__nobackup__}"
SOURCE_FILE_EXTENSION="$([[ "$SOURCE_FILE_FULLNAME" = *.* ]] && echo ".${SOURCE_FILE_FULLNAME##*.}" || echo '')"
SOURCE_FILE_NAME="${SOURCE_FILE_FULLNAME%.*}"

DEST_NAME="$2" # encryptme-20YY-mmDDHH-MMXX

FILE_COMMENT="$3" # "Databasen xyz från abc (2020-XX-XX)"

{#
#Exempel:
# dump_db.sh diploma_portal
# dump_db.sh diploma_portal "kl%H%M"
# dump_db.sh diploma_portal "dag%d-kl%H%M"

# dump_db.sh diploma_talarformedling "" root@server.diplomautbildning.se

#DB="{{ webinstance.database }}"
# Som namn på backupen används datum och tid, men annat namn kan sättas som argument till detta sctipt. 
#NAME="$DB-$(date +${1:-%Y%m%d-%H%M})"

#mkdir -p "{{ webinstance.path }}/backup/plain"


#DUMP_FILENAME="dump-$NAME.sql"

#echo "Database: $DB"
#echo "Backup id: $NAME"
#echo "Dump file: $DUMP_FILENAME"

#}

TAR_DIR="{{ script_working_dir }}/encrypted/$DEST_NAME"

rm -rf "$TAR_DIR" || true
mkdir -p "$TAR_DIR"
cd "$TAR_DIR"

# Skapa en readme 
cat <<EOT >> readme.txt
${FILE_COMMENT}

Filen ${SOURCE_FILE_FULLNAME}.gpg är krypterat med ett genererat lösenord.
Symmetrisk kryptering med AES256 används med kommandot gpg.

Det genererade lösenordet finns krypterade i filerna *-key.bin.gpg
och går enbart att avkryptera med respektive personlig nyckel.

De som kan avkryptera säkerhetskopian är:
{% for user in users if user.pgp_user is defined %}
{{ user.pgp_user }}
{% endfor %}

Det finns ett hjälpscript för respektive användare, unpack-*.sh för att avkryptera filen.

EOT


# Generera en random nyckel:
SYMETRIC_KEY="$(openssl rand -base64 32)"

# Kryptera denna nyckel, till de olika administratörer som kan läsa denna backup.
{% set counter = {'i': 0} %}
{% for user in users if user.pgp_user is defined %}
{{   counter.__setitem__('i', counter.i+1) }}
echo "$SYMETRIC_KEY" | gpg --trust-model always --armor --encrypt --recipient "{{ user.pgp_user }}" -o "key-{{ user.pgp_user }}.bin.gpg"

# Gör ett script förr användare {{ user.pgp_user }} 
cat <<EOT >> unpack-{{ user.pgp_user }}.sh
#!/bin/bash
# Avkrypterar den symetriska nyckeln för att sedan avkryptera data-filen med denna.
gpg --decrypt "key-{{ user.pgp_user }}.bin.gpg" \
    | gpg --batch --yes --passphrase-fd 0 --output "$SOURCE_FILE_FULLNAME" --decrypt "${SOURCE_FILE_FULLNAME}.gpg"
EOT
chmod a+x unpack-{{ user.pgp_user }}.sh
{% endfor %}

{% if counter.i == 0 %}
# Nästa rader kommer få ansible att misslyckas 
{{   MISSING_BACKUP_RECIEVER }}
{{   0/0 }}
{% endif %}

#Kryptering av data-fil:
echo "$SYMETRIC_KEY" | gpg --batch --yes --passphrase-fd 0 --cipher-algo aes256 --output "${SOURCE_FILE_FULLNAME}.gpg" --symmetric "$SOURCE_FILE"
unset SYMETRIC_KEY


# Paketera katalogen
cd ..
tar -C "$TAR_DIR" -c --remove-files -f "{{ script_output_dir }}/$DEST_NAME.tar" "."
