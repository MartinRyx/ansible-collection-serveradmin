#!/bin/bash
#
# Generated by Ansible
#
# Andringar i denna fil ska goras via Ansible, annars skrivs de over. / Lasse
#

REPORT_FILE="{{ item.root }}/log/disk_usage_report-{{ item.name }}.txt"

cd {{ item.root }}/{{ item.name }}

echo "Report" $(date -u) > $REPORT_FILE

pwd >> $REPORT_FILE
echo "Growing report:" >> $REPORT_FILE
# Kommandoanteckningar:
# Säkerställ rätt ordning genom att ge både .? och .[1-9]? (Undviker ordningen: 0,1,10,11,2,3...)
# tr ' ' '/n' = Ersätter mellanslag med ny rad
# egrep '[0-9]+$' = Säkerställer att namnen slutar med siffror, tar bort icke expanderade wildcards. (Om de inte matchar något, expl om monthsago.10 inte finns än)
# tac = reverse cat, sorterar backlänges
# tr ' ' '/n' = Återställer ny rad med mellanslag igen
du -sch $(echo daysago.? weeksago.? monthsago.? monthsago.1? yearsago.? yearsago.[1-9]? | tr ' ' '\n' | egrep '[0-9]+$' | tac | tr '\n' ' ') >> $REPORT_FILE

echo >> $REPORT_FILE
echo "Disk usage:" >> $REPORT_FILE
du -sch $(echo daysago.? weeksago.? monthsago.? monthsago.1? yearsago.? yearsago.[1-9]? | tr ' ' '\n' | egrep '[0-9]+$' | tr '\n' ' ') >> $REPORT_FILE

echo >> $REPORT_FILE
echo "Snapshot-dates:" >> $REPORT_FILE
# xarg-anteckningar
# -n1                 Kör kommandot en gång per rad
# -I %                Ersätt % med pipad rad i kommanot
# sh- c "...; ...;"   Starta sh och kör kommandona.
#
# echo
# -e                  Gör att \t blir tab
# -n                  Ingen ny rad
echo daysago.? weeksago.? monthsago.? monthsago.1? yearsago.? yearsago.[1-9]? | tr ' ' '\n' | egrep '[0-9]+$' | xargs -n1 -I % sh -c 'echo -en %"\t"; stat % | grep "Modify";' >> $REPORT_FILE
