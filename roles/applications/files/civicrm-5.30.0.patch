#
# Created with:
#   cd wp-content/plugins
#   diff -Naur civicrm civicrm_patched
#
diff -Naur civicrm/civicrm/install/civicrm.php civicrm_patched/civicrm/install/civicrm.php
--- civicrm/civicrm/install/civicrm.php	2020-10-08 04:39:04.000000000 +0200
+++ civicrm_patched/civicrm/install/civicrm.php	2020-11-02 20:10:27.310710674 +0100
@@ -80,7 +80,7 @@
   }
 
   $parts = explode(':', $config['mysql']['server']);
-  if (empty($parts[1])) {
+  if (empty($parts[1]) && preg_match('/^unix\(([^)]+)\)$/', $parts[0]) !== 1) {
     $parts[1] = 3306;
   }
   $config['mysql']['server'] = implode(':', $parts);
diff -Naur civicrm/civicrm/install/index.php civicrm_patched/civicrm/install/index.php
--- civicrm/civicrm/install/index.php	2020-10-08 04:37:30.000000000 +0200
+++ civicrm_patched/civicrm/install/index.php	2020-11-02 20:10:27.310710674 +0100
@@ -623,7 +623,16 @@
     else {
       $port = NULL;
     }
-    $conn = @mysqli_connect($host, $username, $password, $database, $port);
+    // Support for unix socket:
+    // I.e> $host == 'unix(/var/lib/mysql/mysql.sock)'
+    if(preg_match('/^unix\(([^)]+)\)$/', $host, $matches) === 1) {
+      $host = 'localhost';
+      $socket = $matches[1];
+    }
+    else {
+      $socket = NULL;
+    }
+    $conn = @mysqli_connect($host, $username, $password, $database, $port, $socket);
     return $conn;
   }
 
diff -Naur civicrm/civicrm/install/template.html civicrm_patched/civicrm/install/template.html
--- civicrm/civicrm/install/template.html	2020-10-08 10:00:26.000000000 +0200
+++ civicrm_patched/civicrm/install/template.html	2020-11-02 20:10:27.310710674 +0100
@@ -100,7 +100,7 @@
 <h4><?php echo ts('CiviCRM Database Settings'); ?></h4>
 <p style="margin-left: 2em" id="mysql_credentials">
   <label for="mysql_server"> <span><?php echo ts('MySQL server:'); ?></span> <input id="mysql_server" type="text" name="mysql[server]" value="<?php echo $databaseConfig['server']; ?>" /></label>
-  <span class="testResults"> <?php echo ts('If your mysql server is running on other port than default 3306, provide server info as server:port (i.e. localhost:1234) ') ?> </span> </br>
+  <span class="testResults"> <?php echo ts('Port can be provided as server:port, default port is 3306. (i.e. localhost:1234) For unix socket on localhost use unix(/path/to/socket) (i.e. unix(/var/lib/mysql/mysql.sock))') ?> </span> </br>
   <label for="mysql_username"> <span><?php echo ts('MySQL username:'); ?></span> <input id="mysql_username" type="text" name="mysql[username]" value="<?php echo $databaseConfig['username']; ?>"  /></label> <br />
   <label for="mysql_password"> <span><?php echo ts('MySQL password:'); ?></span> <input id="mysql_password" type="password" name="mysql[password]" value="<?php echo $databaseConfig['password']; ?>" /></label> <br />
   <label for="mysql_database"><span><?php echo ts('MySQL database:'); ?></span> <input id="mysql_database" type="text" name="mysql[database]" value="<?php echo $databaseConfig['database']; ?>" /></label> <br />
@@ -110,7 +110,7 @@
 <h4><?php echo ts('Drupal Database Settings'); ?></h4>
 <p style="margin-left: 2em" id="drupal_credentials" > <!--style="display: none"-->
   <label for="drupal_server"> <span><?php echo ts('MySQL server:'); ?></span> <input id="drupal_server" type="text" name="drupal[server]" value="<?php echo $drupalConfig['server']; ?>" /></label>
-  <span class="testResults"> <?php echo ts('If your mysql server is running on other port than default 3306, provide server info as server:port (i.e. localhost:1234) ') ?> </span> </br>
+  <span class="testResults"> <?php echo ts('Port can be provided as server:port, default port is 3306. (i.e. localhost:1234) For unix socket on localhost use unix(/path/to/socket) (i.e. unix(/var/lib/mysql/mysql.sock))') ?> </span> </br>
   <label for="drupal_username"> <span><?php echo ts('MySQL username:'); ?></span> <input id="drupal_username" type="text" name="drupal[username]" value="<?php echo $drupalConfig['username']; ?>"  /></label> <br />
   <label for="drupal_password"> <span><?php echo ts('MySQL password:'); ?></span> <input id="drupal_password" type="password" name="drupal[password]" value="<?php echo $drupalConfig['password']; ?>" /></label> <br />
   <label for="drupal_database"><span><?php echo ts('MySQL database:'); ?></span> <input id="drupal_database" type="text" name="drupal[database]" value="<?php echo $drupalConfig['database']; ?>" /></label> <br />
@@ -121,7 +121,7 @@
 <h4><?php echo ts('Backdrop Database Settings'); ?></h4>
 <p style="margin-left: 2em" id="backdrop_credentials" > <!--style="display: none"-->
   <label for="backdrop_server"> <span><?php echo ts('MySQL server:'); ?></span> <input id="backdrop_server" type="text" name="backdrop[server]" value="<?php echo $backdropConfig['server'] ?>" /></label>
-  <span class="testResults"> <?php echo ts('If your mysql server is running on other port than default 3306, provide server info as server:port (i.e. localhost:1234) ') ?> </span> </br>
+  <span class="testResults"> <?php echo ts('Port can be provided as server:port, default port is 3306. (i.e. localhost:1234) For unix socket on localhost use unix(/path/to/socket) (i.e. unix(/var/lib/mysql/mysql.sock))') ?> </span> </br>
   <label for="backdrop_username"> <span><?php echo ts('MySQL username:'); ?></span> <input id="backdrop_username" type="text" name="backdrop[username]" value="<?php echo $backdropConfig['username'] ?>"  /></label> <br />
   <label for="backdrop_password"> <span><?php echo ts('MySQL password:'); ?></span> <input id="backdrop_password" type="password" name="backdrop[password]" value="<?php echo $backdropConfig['password'] ?>" /></label> <br />
   <label for="backdrop_database"><span><?php echo ts('MySQL database:'); ?></span> <input id="backdrop_database" type="text" name="backdrop[database]" value="<?php echo $backdropConfig['database'] ?>" /></label> <br />
diff -Naur civicrm/civicrm/setup/plugins/blocks/advanced.tpl.php civicrm_patched/civicrm/setup/plugins/blocks/advanced.tpl.php
--- civicrm/civicrm/setup/plugins/blocks/advanced.tpl.php	2020-10-08 10:00:26.000000000 +0200
+++ civicrm_patched/civicrm/setup/plugins/blocks/advanced.tpl.php	2020-11-02 21:19:55.880295857 +0100
@@ -39,6 +39,7 @@
           <p><?php echo ts('By default, CiviCRM uses the same database as your website. You may install on a separate database if you need more fine-grained control over permissions, replication, hardware capacity, etc.'); ?></p>
           <p><?php echo ts('<strong>Example</strong>: <code>%1</code>', array(1 => 'mysql://admin:secret@localhost/civicrm')); ?></p>
           <p><?php echo ts('<strong>Example</strong>: <code>%1</code>', array(1 => 'mysql://admin:secret@127.0.0.1:3306/otherdb')); ?></p>
+          <p><?php echo ts('<strong>Example</strong>: <code>%1</code>', array(1 => 'mysql://admin:secret@unix(/var/lib/mysql/mysql.sock)/otherdb')); ?></p>
         </div>
       </td>
     </tr>
diff -Naur civicrm/civicrm/setup/plugins/init/WordPress.civi-setup.php civicrm_patched/civicrm/setup/plugins/init/WordPress.civi-setup.php
--- civicrm/civicrm/setup/plugins/init/WordPress.civi-setup.php	2020-08-06 04:54:52.000000000 +0200
+++ civicrm_patched/civicrm/setup/plugins/init/WordPress.civi-setup.php	2020-11-02 22:22:51.617408077 +0100
@@ -50,8 +50,9 @@
     $model->templateCompilePath = implode(DIRECTORY_SEPARATOR, [$uploadDir['basedir'], 'civicrm', 'templates_c']);
 
     // Compute DSN.
+    list(/*$host*/, /*$port*/, $socket) = Civi\Setup\DbUtil::decodeHostPort(DB_HOST);
     $model->db = $model->cmsDb = array(
-      'server' => DB_HOST,
+      'server' => $socket ? sprintf('unix(%s)', $socket) : DB_HOST,
       'username' => DB_USER,
       'password' => DB_PASSWORD,
       'database' => DB_NAME,
diff -Naur civicrm/civicrm/setup/src/Setup/DbUtil.php civicrm_patched/civicrm/setup/src/Setup/DbUtil.php
--- civicrm/civicrm/setup/src/Setup/DbUtil.php	2020-10-08 04:39:04.000000000 +0200
+++ civicrm_patched/civicrm/setup/src/Setup/DbUtil.php	2020-11-02 22:21:28.613614143 +0100
@@ -11,11 +11,27 @@
    */
   public static function parseDsn($dsn) {
     $parsed = parse_url($dsn);
+    // parse_url parses 'mysql://admin:secret@unix(/var/lib/mysql/mysql.sock)/otherdb' like:
+    // [
+    //   'host'   => 'unix(',
+    //   'path'   => '/var/lib/mysql/mysql.sock)/otherdb',
+    //   ...
+    // ]
+    if ($parsed['host'] == 'unix(') {
+       preg_match('/(unix\(.*\))(\/(.+)?)?$/', $dsn, $matches);
+       $server = $matches[1];
+       $database = $matches[3] ?? NULL;
+    }
+    else {
+      $server = self::encodeHostPort($parsed['host'], $parsed['port'] ?? NULL);
+      $database = $parsed['path'] ? ltrim($parsed['path'], '/') : NULL;
+    }
+
     return array(
-      'server' => self::encodeHostPort($parsed['host'], $parsed['port'] ?? NULL),
+      'server' => $server,
       'username' => $parsed['user'] ?: NULL,
       'password' => $parsed['pass'] ?: NULL,
-      'database' => $parsed['path'] ? ltrim($parsed['path'], '/') : NULL,
+      'database' => $database,
       'ssl_params' => self::parseSSL($parsed['query'] ?? NULL),
     );
   }
@@ -41,9 +57,9 @@
    * @return \mysqli
    */
   public static function softConnect($db) {
-    list($host, $port) = self::decodeHostPort($db['server']);
+    list($host, $port, $socket) = self::decodeHostPort($db['server']);
     if (empty($db['ssl_params'])) {
-      $conn = @mysqli_connect($host, $db['username'], $db['password'], $db['database'], $port);
+      $conn = @mysqli_connect($host, $db['username'], $db['password'], $db['database'], $port, $socket);
     }
     else {
       $conn = NULL;
@@ -56,8 +72,7 @@
         $db['ssl_params']['capath'] ?? NULL,
         $db['ssl_params']['cipher'] ?? NULL
       );
-      // @todo socket parameter, but if you're using sockets do you need SSL?
-      if (@mysqli_real_connect($init, $host, $db['username'], $db['password'], $db['database'], $port, NULL, MYSQLI_CLIENT_SSL)) {
+      if (@mysqli_real_connect($init, $host, $db['username'], $db['password'], $db['database'], $port, $socket, MYSQLI_CLIENT_SSL)) {
         $conn = $init;
       }
     }
@@ -84,21 +99,34 @@
    *   Ex: '127.0.0.1:123'
    *   Ex: '[1234:abcd]'
    *   Ex: '[1234:abcd]:123'
+   *   Ex: 'localhost:/path/to/socket.sock
+   *   Ex: 'unix(/path/to/socket.sock)
    * @return array
-   *   Combination: [0 => string $host, 1 => numeric|NULL $port].
-   *   Ex: ['localhost', NULL].
-   *   Ex: ['127.0.0.1', 3306]
+   *   Combination: [0 => string $host, 1 => numeric|NULL $port, 2 => string|NULL].
+   *   Ex: ['localhost', NULL, NULL].
+   *   Ex: ['127.0.0.1', 3306, NULL]
    */
   public static function decodeHostPort($host) {
-    $hostParts = explode(':', $host);
-    if (count($hostParts) > 1 && strrpos($host, ']') !== strlen($host) - 1) {
-      $port = array_pop($hostParts);
-      $host = implode(':', $hostParts);
+    $port = NULL;
+    $socket = NULL;
+    if(preg_match('/^unix\(([^)]+)\)$/', $host, $matches) === 1) {
+       $host = 'localhost';
+       $socket = $matches[1];
     }
     else {
-      $port = NULL;
+      $hostParts = explode(':', $host);
+      if (count($hostParts) > 1 && strrpos($host, ']') !== strlen($host) - 1) {
+        $portOrSocket = array_pop($hostParts);
+        if (substr($portOrSocket, /*start*/ 0, /*length*/ 1) == '/') {
+          $socket = $portOrSocket;
+        }
+        else {
+          $port = $portOrSocket;
+        }
+        $host = implode(':', $hostParts);
+      }
     }
-    return array($host, $port);
+    return array($host, $port, $socket);
   }
 
   /**
