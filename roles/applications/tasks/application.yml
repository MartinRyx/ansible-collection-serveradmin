---
- name: "Current application"
  debug:
    var: application

- name: "Create user specific group for application"
  become: yes
  group:
    name: "{{ application.process_group }}"
    system: yes

- name: "Adding sudo users to the app-group for reading dir and files"
  become: yes
  user:
    name: "{{ item.name }}"
    groups: "{{ application.process_group }}"
    append: yes
  when: item.sudoer | default(false)
  loop: "{{ users + [{ 'name': serveradmin.process_user, 'sudoer': true }] }}"

- name: "Get info about process user"
  getent:
    database: passwd
    key: "{{ application.process_user }}"
    fail_key: false
  # Registrerar i getent_passwd

- name: "Create process user for application"
  become: yes
  user:
    name: "{{ application.process_user }}"
    group: "{{ application.process_group }}"
    createhome: yes
    move_home: no
    append: yes
    home: "/home/system/{{ application.process_user }}"
    system: yes
  when: getent_passwd[application.process_user] is none

- name: "Let nginx join group to to read source-data"
  become: yes
  user:
    name: "{{ nginx_user }}"
    groups: "{{ application.process_group }}"
    append: true
  notify: "Reload nginx"

- name: "Create DB for application"
  become: yes
  mysql_db:
    name: "{{ database.database }}"
    collation: "{{ database.collation | default('utf8mb4_general_ci') }}"
    encoding: "{{ database.encoding | default('utf8mb4') }}"
    state: present
    login_user: root
    login_unix_socket: "/var/lib/mysql/mysql.sock"
  when: database.create | default(false)
  loop: "{{ application.databases | default([]) }}"
  loop_control:
    loop_var: database

- name: "Let process user (linux) have access to application database"
  include_role:
    name: mariadb
    tasks_from: create_user
  vars:
    user:
      name: "{{ application.process_user }}"
      is_linux_user: true
      databases: "{{ application.databases }}"
  when: application.databases is defined

- name: "Config för process user"
  include_role:
    name: git
    tasks_from: config_git_for_user
  vars:
    user:
      name: "{{ application.process_user }}"
      #fullname: "hela namnet" #Optional: annars använs user.name
      #email: "Epost" #Optional: annars används user.name @ inventory_hostname

- name: "Create dir in /opt for organisation"
  become: yes
  file:
    path: "{{ temp_organisation_path }}"
    state: directory
    owner: "{{ serveradmin.process_user }}"
    group: "{{ serveradmin.process_group }}"
    mode: "u=rwx,g=rx,o=rx"
  when: (temp_organisation_path in application.path)
  vars:
    temp_organisation_path: "/opt/{{ application.organisation }}"

- name: "Create dir in /opt/organisation for application"
  become: yes
  file:
    path: "{{ application.path }}{{ item.path }}"
    state: directory
    owner: "{{ item.owner | default( application.process_user, true ) }}"
    group: "{{ item.group | default( application.process_group, true ) }}"
    setype: "{{ item.setype | default( '_default' ) }}"                  # httpd_sys_content_t
    mode: "{{ item.mode | default('u=rwx,g=rx,o=') }}"
  when: item.when | default(True)
  loop:
    - { path: "" }
    # Log, ägs av app-...:app-... nginx kan kan komma åt sin log.
    - { path: "/log" }
    - { path: "/log/nginx", setype: "httpd_sys_rw_content_t" }
    # För letsencrypt. Script körs av root. nginx behöver komma åt challenges
    - { path: "/letsencrypt",            when: "{{ application.any_letsencrypt }}" }
    - { path: "/letsencrypt/challenges", when: "{{ application.any_letsencrypt }}" }
    - { path: "/log/letsencrypt",        when: "{{ application.any_letsencrypt }}" }
    # För PHP
    - { path: "/log/php-fpm", setype: "httpd_sys_rw_content_t", when: "{{ application.any_enable_php }}" }
    - { path: "/php-fpm",                                       when: "{{ application.any_enable_php }}" }
    # För deploy
    - { path: "/repos", when: "{{ application.repos[0] is defined }}" }
    # För Java
    - { path: "/webapp",             when: false }

### NodeJS #####################################################################
# Reading: https://www.sitepoint.com/quick-tip-multiple-versions-node-nvm/
# Ansible-role: https://github.com/morgangraphics/ansible-role-nvm
- name: "Install Node Version Manager (NVM)"
  include_role:
    name: "morgangraphics_nvm"
  vars:
    #include_role doesn't accept become, use variable. Even tmp-directory is necessary
    #ansible_become: yes
    #ansible_user: "{{ application.process_user }}"
    #ansible_remote_tmp: "/tmp/.ansible"
    nvm:
      user: "{{ application.process_user }}"
      default: true # Make this version default
      nodejs_version: "{{ application.nodejs_version }}"
      #nvm_install: "git"
      nvm_profile: ".bashrc"
  when: application.nodejs_version is defined

### Redis #######################################################################

- name: Include Redis
  include_tasks: redis.yml
  when: application.enable_redis

### webinstances ################################################################

- name: "Loop over all webinstances for this application"
  include_tasks: webinstance.yml
  loop: "{{ application.webinstances.values()|list }}"
  loop_control:
    loop_var: webinstance

### devmodes ####################################################################

- name: Repos for devmode
  include_tasks: devmode_repo.yml
  loop: "{{ application.repos }}"
  loop_control:
    loop_var: repo
    label: "{{ repo.name }}"
  when: applications_devmode | d(false)
